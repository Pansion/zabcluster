#!/usr/bin/env stap  
#
# Copyright (C) 2007 Oracle Corp.
#
# Trace state transition of one specified process
#
# GNU General Public License (GPL); either version 2, or (at your option) any
# later version.
#
# Parameter 1: specified process id
#
# Usage:
#  ./proc_transition_by_pid.stp -gx 1234
#
# Output:
#  Process 1234: TASK_RUNNING -> TASK_INTERRUPTIBLE
#  Process 1234: TASK_RUNNING -> TASK_STOP
#    ...
#
# Note:  timestamp may be not exactly point to transition moment. Fix me!

global id_state
global traced_pid
global task_name

/*return task name according to process id*/
function __get_task_name: string (pid:long) %{
        struct task_struct *p;
        pid_t pid;

        pid = (pid_t)(long)THIS->pid;

        rcu_read_lock();
        p = find_task_by_pid(pid);
        rcu_read_unlock();

        if (p==NULL)
                strlcpy(THIS->__retvalue,"Unknown",MAXSTRINGLEN);
        else  {
                strlcpy(THIS->__retvalue,p->comm,MAXSTRINGLEN);
              }
        CATCH_DEREF_FAULT();
%}

/* process added into runqueue : really running or well prepared */
probe kernel.function("__activate_task"){
	if ($p->pid==traced_pid)
	  printf("[%d] %s(%d): %s --> TASK_RUNNING\n",get_cycles(),task_name,traced_pid,id_state[$p->state]);
}

/* process removed from runqueue : in wait queue or other state */
probe kernel.function("deactivate_task") {
	if ($p->pid==traced_pid)
	  printf("[%d] %s(%d): TASK_RUNNING --> %s\n", get_cycles(),task_name,traced_pid, id_state[$p->state]);
}

/* process clean up */
probe kernel.function("release_task").return {
	if ($p->pid==traced_pid){
	  printf("[%d] %s(%d): %s --> Cleaned \n", get_cycles(),task_name,traced_pid, id_state[$p->state]);
  	  exit() 
	}
}

/* accept one parameter as process id
*  if not in correct format, step1 parse reports error*/
probe begin {
	/*from sched.h*/
	id_state[0] = "TASK_RUNNING"
	id_state[1] = "TASK_INTERRUPTIBLE"
	id_state[2] = "TASK_UNINTERRUPTIBLE"
	id_state[4] = "TASK_STOPPED"
	id_state[8] = "TASK_TRACED"
	/* exit_state
	id_state[16] = "EXIT_ZOMBIE"
	id_state[32] = "EXIT_DEAD"
	*/
	id_state[64] = "TASK_NONINTERACTIVE"
	id_state[128] = "TASK_DEAD"

        traced_pid = target();
	task_name = __get_task_name(traced_pid);
	if (task_name!="Unknown") {
		   printf("Now scanning the process...\n\n");
 	    }
        else  {	
	   printf("No such process!\n");
	   exit();
	   }
}
	
probe end{
	delete id_state;
	delete traced_pid;
	delete task_name;
}
